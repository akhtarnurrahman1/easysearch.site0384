<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FramerStudio - Professional Design Tool</title>
    <meta name="description" content="Professional design and prototyping tool with interactive canvas, components, and export features">
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            darkMode: ["class"],
            theme: {
                extend: {
                    colors: {
                        border: "hsl(220 13% 91%)",
                        input: "hsl(220 13% 91%)",
                        ring: "hsl(262 83% 58%)",
                        background: "hsl(220 17% 7%)",
                        foreground: "hsl(220 9% 98%)",
                        primary: {
                            DEFAULT: "hsl(262 83% 58%)",
                            foreground: "hsl(210 20% 98%)"
                        },
                        secondary: {
                            DEFAULT: "hsl(220 14% 96%)",
                            foreground: "hsl(220 9% 10%)"
                        },
                        destructive: {
                            DEFAULT: "hsl(0 84% 60%)",
                            foreground: "hsl(210 20% 98%)"
                        },
                        muted: {
                            DEFAULT: "hsl(220 14% 96%)",
                            foreground: "hsl(220 9% 46%)"
                        },
                        accent: {
                            DEFAULT: "hsl(220 14% 96%)",
                            foreground: "hsl(220 9% 10%)"
                        },
                        popover: {
                            DEFAULT: "hsl(0 0% 100%)",
                            foreground: "hsl(220 9% 10%)"
                        },
                        card: {
                            DEFAULT: "hsl(0 0% 100%)",
                            foreground: "hsl(220 9% 10%)"
                        }
                    }
                }
            }
        }
    </script>
    
    <!-- Lucide Icons -->
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    
    <style>
        :root {
            --primary: 262 83% 58%;
            --primary-foreground: 210 20% 98%;
            --secondary: 220 14% 96%;
            --secondary-foreground: 220 9% 10%;
            --background: 220 17% 7%;
            --foreground: 220 9% 98%;
            --muted: 220 14% 96%;
            --muted-foreground: 220 9% 46%;
            --border: 220 13% 91%;
            --ring: 262 83% 58%;
            --destructive: 0 84% 60%;
            --gradient-primary: linear-gradient(135deg, hsl(262 83% 58%), hsl(242 83% 65%));
            --gradient-secondary: linear-gradient(135deg, hsl(220 17% 7%), hsl(220 17% 15%));
            --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            --shadow-elegant: 0 10px 30px -10px hsl(262 83% 58% / 0.3);
            --shadow-glass: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        }

        body {
            background: hsl(var(--background));
            color: hsl(var(--foreground));
            font-family: system-ui, -apple-system, sans-serif;
        }

        .glass-panel {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            box-shadow: var(--shadow-glass);
        }

        .canvas-element {
            position: absolute;
            border: 2px solid transparent;
            cursor: move;
            transition: var(--transition-smooth);
        }

        .canvas-element.selected {
            border-color: hsl(var(--primary));
            box-shadow: var(--shadow-elegant);
        }

        .canvas-element:hover {
            border-color: hsl(var(--primary) / 0.5);
        }

        .bg-gradient-primary {
            background: var(--gradient-primary);
        }

        .transition-smooth {
            transition: var(--transition-smooth);
        }

        .btn {
            padding: 8px 16px;
            border-radius: 8px;
            border: 1px solid hsl(var(--border));
            background: hsl(var(--background));
            color: hsl(var(--foreground));
            cursor: pointer;
            transition: var(--transition-smooth);
            display: inline-flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
        }

        .btn:hover {
            background: hsl(var(--secondary) / 0.1);
        }

        .btn.active {
            background: hsl(var(--primary));
            color: hsl(var(--primary-foreground));
        }

        .btn-primary {
            background: var(--gradient-primary);
            color: hsl(var(--primary-foreground));
            border: none;
        }

        .input {
            padding: 8px 12px;
            border-radius: 6px;
            border: 1px solid hsl(var(--border));
            background: hsl(var(--background));
            color: hsl(var(--foreground));
            font-size: 14px;
        }

        .slider {
            width: 100%;
            height: 4px;
            border-radius: 2px;
            background: hsl(var(--border));
            outline: none;
            appearance: none;
        }

        .slider::-webkit-slider-thumb {
            appearance: none;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: hsl(var(--primary));
            cursor: pointer;
        }

        .color-picker-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .export-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .scrollable {
            max-height: 300px;
            overflow-y: auto;
        }

        .grid-pattern {
            background-image: radial-gradient(circle, hsl(var(--muted-foreground)) 1px, transparent 1px);
            background-size: 20px 20px;
            background-position: 10px 10px;
        }

        .tooltip {
            position: relative;
        }

        .tooltip:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            z-index: 1000;
        }
    </style>
</head>
<body class="dark">
    <div id="app" class="h-screen bg-background overflow-hidden flex">
        <!-- Main Toolbar -->
        <div class="w-16 bg-secondary/20 border-r border-border flex flex-col items-center py-4 space-y-3">
            <div class="w-10 h-10 bg-gradient-primary rounded-lg flex items-center justify-center">
                <i data-lucide="layout-grid" class="w-5 h-5 text-white"></i>
            </div>
            
            <div class="w-8 h-px bg-border"></div>
            
            <button id="tool-select" class="btn tooltip w-10 h-10 p-0 active" data-tooltip="Select (V)">
                <i data-lucide="mouse-pointer" class="w-4 h-4"></i>
            </button>
            
            <button id="tool-rectangle" class="btn tooltip w-10 h-10 p-0" data-tooltip="Rectangle (R)">
                <i data-lucide="square" class="w-4 h-4"></i>
            </button>
            
            <button id="tool-circle" class="btn tooltip w-10 h-10 p-0" data-tooltip="Circle (C)">
                <i data-lucide="circle" class="w-4 h-4"></i>
            </button>
            
            <button id="tool-text" class="btn tooltip w-10 h-10 p-0" data-tooltip="Text (T)">
                <i data-lucide="type" class="w-4 h-4"></i>
            </button>
            
            <div class="w-8 h-px bg-border"></div>
            
            <button id="color-picker-btn" class="btn tooltip w-10 h-10 p-0" data-tooltip="Colors">
                <i data-lucide="palette" class="w-4 h-4"></i>
            </button>
            
            <button id="export-btn" class="btn tooltip w-10 h-10 p-0" data-tooltip="Export">
                <i data-lucide="download" class="w-4 h-4"></i>
            </button>
        </div>

        <!-- Canvas Area -->
        <div class="flex-1 flex flex-col">
            <div class="h-12 bg-secondary/50 border-b border-border flex items-center px-4">
                <span class="text-sm font-medium">Untitled Project</span>
            </div>
            
            <div class="flex-1 flex">
                <div id="canvas-container" class="flex-1 relative bg-secondary/20 overflow-hidden">
                    <div id="canvas" class="absolute inset-0 grid-pattern cursor-crosshair">
                        <!-- Canvas Center Indicator -->
                        <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                            <div class="w-px h-20 bg-primary/20"></div>
                            <div class="w-20 h-px bg-primary/20 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"></div>
                        </div>

                        <!-- Tool Indicator -->
                        <div id="tool-indicator" class="absolute top-4 left-4 glass-panel px-3 py-2" style="display: none;">
                            <div class="flex items-center gap-2">
                                <i data-lucide="plus" class="w-4 h-4 text-primary"></i>
                                <span id="tool-text-indicator" class="text-sm font-medium">Click to add rectangle</span>
                            </div>
                        </div>

                        <!-- Empty State -->
                        <div id="empty-state" class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center">
                            <div class="glass-panel p-8 max-w-sm">
                                <div class="w-16 h-16 bg-gradient-primary rounded-full mx-auto mb-4 flex items-center justify-center">
                                    <i data-lucide="plus" class="w-8 h-8 text-white"></i>
                                </div>
                                <h3 class="text-lg font-semibold mb-2">Start Creating</h3>
                                <p class="text-muted-foreground text-sm">
                                    Select a tool from the toolbar and click anywhere on the canvas to create your first element.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Panels -->
        <div class="w-80 bg-secondary/30 border-l border-border flex flex-col">
            <!-- Layers Panel -->
            <div class="flex-1 glass-panel m-3 p-4">
                <div class="flex items-center gap-2 mb-4">
                    <i data-lucide="layers" class="w-4 h-4 text-primary"></i>
                    <span class="font-medium text-sm">Layers</span>
                </div>

                <div id="layers-list" class="scrollable space-y-1">
                    <div id="no-elements" class="text-muted-foreground text-sm text-center py-8">
                        No elements yet.<br />
                        Use the tools to create something!
                    </div>
                </div>
            </div>
            
            <!-- Properties Panel -->
            <div id="properties-panel" class="glass-panel m-3 p-4" style="display: none;">
                <div class="flex items-center gap-2 mb-4">
                    <i data-lucide="settings" class="w-4 h-4 text-primary"></i>
                    <span class="font-medium text-sm">Properties</span>
                </div>

                <div class="space-y-4">
                    <!-- Position & Size -->
                    <div class="space-y-3">
                        <div class="flex items-center gap-2">
                            <i data-lucide="move" class="w-3 h-3 text-muted-foreground"></i>
                            <span class="text-xs font-medium">Position & Size</span>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-2">
                            <div>
                                <label class="text-xs text-muted-foreground">X</label>
                                <input id="prop-x" type="number" class="input w-full h-8 text-xs">
                            </div>
                            <div>
                                <label class="text-xs text-muted-foreground">Y</label>
                                <input id="prop-y" type="number" class="input w-full h-8 text-xs">
                            </div>
                            <div>
                                <label class="text-xs text-muted-foreground">Width</label>
                                <input id="prop-width" type="number" class="input w-full h-8 text-xs">
                            </div>
                            <div>
                                <label class="text-xs text-muted-foreground">Height</label>
                                <input id="prop-height" type="number" class="input w-full h-8 text-xs">
                            </div>
                        </div>
                    </div>

                    <div class="w-full h-px bg-border"></div>

                    <!-- Rotation -->
                    <div class="space-y-3">
                        <div class="flex items-center gap-2">
                            <i data-lucide="rotate-cw" class="w-3 h-3 text-muted-foreground"></i>
                            <span class="text-xs font-medium">Rotation</span>
                        </div>
                        
                        <div class="space-y-2">
                            <input id="prop-rotation" type="range" min="0" max="360" value="0" class="slider">
                            <div id="rotation-value" class="text-xs text-muted-foreground text-center">0°</div>
                        </div>
                    </div>

                    <div class="w-full h-px bg-border"></div>

                    <!-- Color -->
                    <div class="space-y-3">
                        <div class="flex items-center gap-2">
                            <i data-lucide="palette" class="w-3 h-3 text-muted-foreground"></i>
                            <span class="text-xs font-medium">Color</span>
                        </div>
                        
                        <div class="flex items-center gap-2">
                            <div id="prop-color-preview" class="w-8 h-8 rounded-lg border border-border cursor-pointer" style="background-color: #8b5cf6;"></div>
                            <input id="prop-color" type="text" value="#8b5cf6" class="input flex-1 h-8 text-xs" placeholder="#8b5cf6">
                        </div>
                    </div>

                    <!-- Text Properties -->
                    <div id="text-properties" class="space-y-3" style="display: none;">
                        <div class="w-full h-px bg-border"></div>
                        <div class="flex items-center gap-2">
                            <i data-lucide="type" class="w-3 h-3 text-muted-foreground"></i>
                            <span class="text-xs font-medium">Text</span>
                        </div>
                        
                        <div class="space-y-2">
                            <div>
                                <label class="text-xs text-muted-foreground">Content</label>
                                <input id="prop-text" type="text" class="input w-full h-8 text-xs" placeholder="Enter text...">
                            </div>
                            
                            <div>
                                <label class="text-xs text-muted-foreground">Font Size</label>
                                <input id="prop-fontsize" type="number" min="8" max="72" value="16" class="input w-full h-8 text-xs">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Color Picker Modal -->
        <div id="color-picker-modal" class="color-picker-overlay" style="display: none;">
            <div class="glass-panel w-80 p-6">
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center gap-2">
                        <i data-lucide="palette" class="w-5 h-5 text-primary"></i>
                        <h3 class="font-semibold">Color Picker</h3>
                    </div>
                    <button id="close-color-picker" class="btn w-8 h-8 p-0">
                        <i data-lucide="x" class="w-4 h-4"></i>
                    </button>
                </div>

                <div class="space-y-6">
                    <!-- Custom Color -->
                    <div class="space-y-3">
                        <label class="text-sm font-medium">Custom Color</label>
                        <div class="flex items-center gap-2">
                            <div id="color-preview" class="w-10 h-10 rounded-lg border border-border cursor-pointer" style="background-color: #8b5cf6;"></div>
                            <input id="color-input" type="text" value="#8b5cf6" class="input flex-1 h-10" placeholder="#8b5cf6">
                        </div>
                    </div>

                    <!-- Preset Colors -->
                    <div class="space-y-3">
                        <label class="text-sm font-medium">Preset Colors</label>
                        <div id="preset-colors" class="grid grid-cols-5 gap-2"></div>
                    </div>

                    <!-- Gradients -->
                    <div class="space-y-3">
                        <label class="text-sm font-medium">Gradients</label>
                        <div id="gradient-colors" class="grid grid-cols-2 gap-2"></div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="flex gap-2">
                        <button id="cancel-color" class="btn flex-1">Cancel</button>
                        <button id="apply-color" class="btn-primary flex-1">Apply</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Export Modal -->
        <div id="export-modal" class="export-overlay" style="display: none;">
            <div class="glass-panel w-96 p-6">
                <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center gap-2">
                        <i data-lucide="download" class="w-5 h-5 text-primary"></i>
                        <h3 class="font-semibold">Export Design</h3>
                    </div>
                    <button id="close-export" class="btn w-8 h-8 p-0">
                        <i data-lucide="x" class="w-4 h-4"></i>
                    </button>
                </div>

                <div class="space-y-6">
                    <div class="space-y-4">
                        <div>
                            <label class="text-sm font-medium mb-2 block">Export Format</label>
                            <div class="grid grid-cols-2 gap-2">
                                <button id="export-png" class="btn w-full justify-center">
                                    <i data-lucide="image" class="w-4 h-4"></i>
                                    PNG Image
                                </button>
                                <button id="export-svg" class="btn w-full justify-center">
                                    <i data-lucide="file-text" class="w-4 h-4"></i>
                                    SVG Vector
                                </button>
                            </div>
                        </div>

                        <div>
                            <label class="text-sm font-medium mb-2 block">Export as Code</label>
                            <div class="grid grid-cols-1 gap-2">
                                <button id="export-html" class="btn w-full justify-center">
                                    <i data-lucide="code" class="w-4 h-4"></i>
                                    HTML + CSS
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="flex gap-2">
                        <button id="cancel-export" class="btn flex-1">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize Lucide icons
        lucide.createIcons();

        // Application State
        let elements = [];
        let selectedElement = null;
        let currentTool = 'select';
        let isDragging = false;
        let dragStart = { x: 0, y: 0 };
        let elementStart = { x: 0, y: 0 };

        // DOM Elements
        const canvas = document.getElementById('canvas');
        const emptyState = document.getElementById('empty-state');
        const toolIndicator = document.getElementById('tool-indicator');
        const toolTextIndicator = document.getElementById('tool-text-indicator');
        const layersList = document.getElementById('layers-list');
        const noElements = document.getElementById('no-elements');
        const propertiesPanel = document.getElementById('properties-panel');

        // Tool Buttons
        const toolButtons = {
            select: document.getElementById('tool-select'),
            rectangle: document.getElementById('tool-rectangle'),
            circle: document.getElementById('tool-circle'),
            text: document.getElementById('tool-text')
        };

        // Property Inputs
        const propInputs = {
            x: document.getElementById('prop-x'),
            y: document.getElementById('prop-y'),
            width: document.getElementById('prop-width'),
            height: document.getElementById('prop-height'),
            rotation: document.getElementById('prop-rotation'),
            color: document.getElementById('prop-color'),
            colorPreview: document.getElementById('prop-color-preview'),
            text: document.getElementById('prop-text'),
            fontSize: document.getElementById('prop-fontsize')
        };

        // Color Picker
        const colorPickerModal = document.getElementById('color-picker-modal');
        const colorInput = document.getElementById('color-input');
        const colorPreview = document.getElementById('color-preview');
        const presetColors = ['#8b5cf6', '#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#ec4899', '#84cc16', '#06b6d4', '#6366f1', '#8b5a2b', '#374151', '#ffffff', '#000000', '#71717a', '#dc2626', '#059669', '#7c3aed', '#db2777', '#ea580c', '#65a30d'];
        const gradients = ['linear-gradient(135deg, #8b5cf6, #3b82f6)', 'linear-gradient(135deg, #ec4899, #8b5cf6)', 'linear-gradient(135deg, #f59e0b, #ef4444)', 'linear-gradient(135deg, #10b981, #06b6d4)', 'linear-gradient(135deg, #6366f1, #8b5cf6)', 'linear-gradient(135deg, #84cc16, #10b981)'];

        // Export Modal
        const exportModal = document.getElementById('export-modal');

        // Initialize Application
        function init() {
            setupToolButtons();
            setupCanvas();
            setupPropertyInputs();
            setupColorPicker();
            setupExportModal();
            updateUI();
        }

        // Tool Management
        function setupToolButtons() {
            Object.entries(toolButtons).forEach(([tool, button]) => {
                button.addEventListener('click', () => setTool(tool));
            });

            document.getElementById('color-picker-btn').addEventListener('click', () => {
                colorPickerModal.style.display = 'flex';
            });

            document.getElementById('export-btn').addEventListener('click', () => {
                exportModal.style.display = 'flex';
            });
        }

        function setTool(tool) {
            currentTool = tool;
            
            // Update button states
            Object.entries(toolButtons).forEach(([t, button]) => {
                button.classList.toggle('active', t === tool);
            });

            // Update tool indicator
            if (tool === 'select') {
                toolIndicator.style.display = 'none';
                canvas.style.cursor = 'default';
            } else {
                toolIndicator.style.display = 'block';
                toolTextIndicator.textContent = `Click to add ${tool}`;
                canvas.style.cursor = 'crosshair';
            }
        }

        // Canvas Management
        function setupCanvas() {
            canvas.addEventListener('click', handleCanvasClick);
            canvas.addEventListener('mousemove', handleCanvasMouseMove);
            canvas.addEventListener('mouseup', handleCanvasMouseUp);
            canvas.addEventListener('mouseleave', handleCanvasMouseUp);
        }

        function handleCanvasClick(e) {
            if (currentTool === 'select') {
                selectElement(null);
                return;
            }

            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left - 50;
            const y = e.clientY - rect.top - 48;

            addElement(currentTool, x, y);
        }

        function handleCanvasMouseMove(e) {
            if (!isDragging || !selectedElement) return;

            const deltaX = e.clientX - dragStart.x;
            const deltaY = e.clientY - dragStart.y;

            updateElement(selectedElement, {
                x: elementStart.x + deltaX,
                y: elementStart.y + deltaY
            });
        }

        function handleCanvasMouseUp() {
            isDragging = false;
        }

        // Element Management
        function addElement(type, x, y) {
            const element = {
                id: `element-${Date.now()}`,
                type,
                x,
                y,
                width: type === 'text' ? 150 : 100,
                height: type === 'text' ? 40 : 100,
                color: type === 'text' ? '#ffffff' : '#8b5cf6',
                text: type === 'text' ? 'Sample Text' : undefined,
                fontSize: type === 'text' ? 16 : undefined,
                rotation: 0
            };

            elements.push(element);
            selectElement(element.id);
            renderElements();
            updateUI();
        }

        function updateElement(id, updates) {
            const index = elements.findIndex(el => el.id === id);
            if (index !== -1) {
                elements[index] = { ...elements[index], ...updates };
                renderElements();
                updateProperties();
            }
        }

        function deleteElement(id) {
            elements = elements.filter(el => el.id !== id);
            if (selectedElement === id) {
                selectElement(null);
            }
            renderElements();
            updateUI();
        }

        function selectElement(id) {
            selectedElement = id;
            renderElements();
            updateProperties();
            updateLayersList();
        }

        // Rendering
        function renderElements() {
            // Remove existing element DOM nodes
            const existingElements = canvas.querySelectorAll('.canvas-element');
            existingElements.forEach(el => el.remove());

            // Render each element
            elements.forEach(element => {
                const elementDiv = document.createElement('div');
                elementDiv.className = `canvas-element ${selectedElement === element.id ? 'selected' : ''}`;
                elementDiv.style.left = `${element.x}px`;
                elementDiv.style.top = `${element.y}px`;
                elementDiv.style.width = `${element.width}px`;
                elementDiv.style.height = `${element.height}px`;
                elementDiv.style.transform = `rotate(${element.rotation}deg)`;

                if (element.type === 'circle') {
                    elementDiv.style.borderRadius = '50%';
                }

                if (element.type === 'text') {
                    elementDiv.style.backgroundColor = 'transparent';
                    elementDiv.style.color = element.color;
                    elementDiv.style.fontSize = `${element.fontSize || 16}px`;
                    elementDiv.style.display = 'flex';
                    elementDiv.style.alignItems = 'center';
                    elementDiv.style.justifyContent = 'center';
                    elementDiv.style.fontWeight = '500';
                    elementDiv.style.userSelect = 'none';
                    elementDiv.textContent = element.text || 'Sample Text';
                } else {
                    elementDiv.style.backgroundColor = element.color;
                }

                elementDiv.addEventListener('mousedown', (e) => {
                    e.stopPropagation();
                    selectElement(element.id);
                    
                    if (currentTool === 'select') {
                        isDragging = true;
                        dragStart = { x: e.clientX, y: e.clientY };
                        elementStart = { x: element.x, y: element.y };
                    }
                });

                canvas.appendChild(elementDiv);
            });
        }

        function updateUI() {
            emptyState.style.display = elements.length === 0 && currentTool === 'select' ? 'block' : 'none';
            noElements.style.display = elements.length === 0 ? 'block' : 'none';
            updateLayersList();
        }

        function updateLayersList() {
            if (elements.length === 0) {
                layersList.innerHTML = '<div id="no-elements" class="text-muted-foreground text-sm text-center py-8">No elements yet.<br />Use the tools to create something!</div>';
                return;
            }

            layersList.innerHTML = elements.map(element => {
                const isSelected = selectedElement === element.id;
                const elementName = element.type === 'text' && element.text ? 
                    (element.text.length > 15 ? `${element.text.substring(0, 15)}...` : element.text) :
                    `${element.type.charAt(0).toUpperCase() + element.type.slice(1)}`;

                return `
                    <div class="flex items-center gap-2 p-2 rounded-lg cursor-pointer transition-smooth group ${isSelected ? 'bg-primary/20 border border-primary/30' : 'hover:bg-secondary/50'}" 
                         onclick="selectElement('${element.id}')">
                        <i data-lucide="${getElementIcon(element.type)}" class="w-4 h-4 text-muted-foreground"></i>
                        <span class="flex-1 text-sm truncate">${elementName}</span>
                        <div class="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-smooth">
                            <button class="btn w-6 h-6 p-0 hover:bg-secondary" title="Toggle visibility">
                                <i data-lucide="eye" class="w-3 h-3"></i>
                            </button>
                            <button class="btn w-6 h-6 p-0 hover:bg-destructive/20 hover:text-destructive" 
                                    onclick="event.stopPropagation(); deleteElement('${element.id}')" title="Delete element">
                                <i data-lucide="trash-2" class="w-3 h-3"></i>
                            </button>
                        </div>
                    </div>
                `;
            }).join('');

            lucide.createIcons();
        }

        function getElementIcon(type) {
            switch (type) {
                case 'rectangle': return 'square';
                case 'circle': return 'circle';
                case 'text': return 'type';
                default: return 'square';
            }
        }

        // Properties Panel
        function setupPropertyInputs() {
            propInputs.x.addEventListener('input', (e) => updateElement(selectedElement, { x: Number(e.target.value) }));
            propInputs.y.addEventListener('input', (e) => updateElement(selectedElement, { y: Number(e.target.value) }));
            propInputs.width.addEventListener('input', (e) => updateElement(selectedElement, { width: Number(e.target.value) }));
            propInputs.height.addEventListener('input', (e) => updateElement(selectedElement, { height: Number(e.target.value) }));
            propInputs.rotation.addEventListener('input', (e) => {
                const value = Number(e.target.value);
                updateElement(selectedElement, { rotation: value });
                document.getElementById('rotation-value').textContent = `${value}°`;
            });
            propInputs.color.addEventListener('input', (e) => {
                updateElement(selectedElement, { color: e.target.value });
                propInputs.colorPreview.style.backgroundColor = e.target.value;
            });
            propInputs.text.addEventListener('input', (e) => updateElement(selectedElement, { text: e.target.value }));
            propInputs.fontSize.addEventListener('input', (e) => updateElement(selectedElement, { fontSize: Number(e.target.value) }));

            propInputs.colorPreview.addEventListener('click', () => {
                const input = document.createElement('input');
                input.type = 'color';
                input.value = propInputs.color.value;
                input.onchange = (e) => {
                    const color = e.target.value;
                    propInputs.color.value = color;
                    propInputs.colorPreview.style.backgroundColor = color;
                    updateElement(selectedElement, { color });
                };
                input.click();
            });
        }

        function updateProperties() {
            if (!selectedElement) {
                propertiesPanel.style.display = 'none';
                return;
            }

            const element = elements.find(el => el.id === selectedElement);
            if (!element) return;

            propertiesPanel.style.display = 'block';
            propInputs.x.value = Math.round(element.x);
            propInputs.y.value = Math.round(element.y);
            propInputs.width.value = Math.round(element.width);
            propInputs.height.value = Math.round(element.height);
            propInputs.rotation.value = element.rotation;
            propInputs.color.value = element.color;
            propInputs.colorPreview.style.backgroundColor = element.color;
            document.getElementById('rotation-value').textContent = `${element.rotation}°`;

            const textProperties = document.getElementById('text-properties');
            if (element.type === 'text') {
                textProperties.style.display = 'block';
                propInputs.text.value = element.text || '';
                propInputs.fontSize.value = element.fontSize || 16;
            } else {
                textProperties.style.display = 'none';
            }
        }

        // Color Picker
        function setupColorPicker() {
            // Setup preset colors
            const presetContainer = document.getElementById('preset-colors');
            presetColors.forEach(color => {
                const colorDiv = document.createElement('button');
                colorDiv.className = 'w-12 h-12 rounded-lg border-2 border-border transition-all hover:scale-105';
                colorDiv.style.backgroundColor = color;
                colorDiv.addEventListener('click', () => {
                    colorInput.value = color;
                    colorPreview.style.backgroundColor = color;
                });
                presetContainer.appendChild(colorDiv);
            });

            // Setup gradients
            const gradientContainer = document.getElementById('gradient-colors');
            gradients.forEach(gradient => {
                const gradientDiv = document.createElement('button');
                gradientDiv.className = 'w-full h-12 rounded-lg border-2 border-border transition-all hover:scale-105 hover:border-primary';
                gradientDiv.style.background = gradient;
                gradientDiv.addEventListener('click', () => {
                    colorInput.value = gradient;
                    colorPreview.style.background = gradient;
                });
                gradientContainer.appendChild(gradientDiv);
            });

            // Color input
            colorInput.addEventListener('input', (e) => {
                colorPreview.style.backgroundColor = e.target.value;
            });

            colorPreview.addEventListener('click', () => {
                const input = document.createElement('input');
                input.type = 'color';
                input.value = colorInput.value;
                input.onchange = (e) => {
                    colorInput.value = e.target.value;
                    colorPreview.style.backgroundColor = e.target.value;
                };
                input.click();
            });

            // Modal controls
            document.getElementById('close-color-picker').addEventListener('click', () => {
                colorPickerModal.style.display = 'none';
            });

            document.getElementById('cancel-color').addEventListener('click', () => {
                colorPickerModal.style.display = 'none';
            });

            document.getElementById('apply-color').addEventListener('click', () => {
                if (selectedElement) {
                    updateElement(selectedElement, { color: colorInput.value });
                    propInputs.color.value = colorInput.value;
                    propInputs.colorPreview.style.backgroundColor = colorInput.value;
                }
                colorPickerModal.style.display = 'none';
            });
        }

        // Export Modal
        function setupExportModal() {
            document.getElementById('close-export').addEventListener('click', () => {
                exportModal.style.display = 'none';
            });

            document.getElementById('cancel-export').addEventListener('click', () => {
                exportModal.style.display = 'none';
            });

            document.getElementById('export-png').addEventListener('click', exportAsPNG);
            document.getElementById('export-svg').addEventListener('click', exportAsSVG);
            document.getElementById('export-html').addEventListener('click', exportAsHTML);
        }

        function exportAsPNG() {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = 800;
            canvas.height = 600;

            // Fill background
            ctx.fillStyle = '#1a1a1a';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw elements
            elements.forEach(element => {
                ctx.save();
                ctx.translate(element.x + element.width/2, element.y + element.height/2);
                ctx.rotate(element.rotation * Math.PI / 180);
                ctx.translate(-element.width/2, -element.height/2);

                if (element.type === 'text') {
                    ctx.fillStyle = element.color;
                    ctx.font = `${element.fontSize || 16}px system-ui`;
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'middle';
                    ctx.fillText(element.text || 'Sample Text', element.width/2, element.height/2);
                } else {
                    ctx.fillStyle = element.color;
                    if (element.type === 'circle') {
                        ctx.beginPath();
                        ctx.ellipse(element.width/2, element.height/2, element.width/2, element.height/2, 0, 0, 2 * Math.PI);
                        ctx.fill();
                    } else {
                        ctx.fillRect(0, 0, element.width, element.height);
                    }
                }
                ctx.restore();
            });

            // Download
            const link = document.createElement('a');
            link.download = 'design.png';
            link.href = canvas.toDataURL();
            link.click();

            exportModal.style.display = 'none';
        }

        function exportAsSVG() {
            let svg = `<svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
                <rect width="800" height="600" fill="#1a1a1a"/>`;

            elements.forEach(element => {
                const transform = `translate(${element.x + element.width/2},${element.y + element.height/2}) rotate(${element.rotation}) translate(${-element.width/2},${-element.height/2})`;
                
                if (element.type === 'text') {
                    svg += `<text x="${element.width/2}" y="${element.height/2}" fill="${element.color}" font-size="${element.fontSize || 16}" text-anchor="middle" dominant-baseline="middle" transform="${transform}">${element.text || 'Sample Text'}</text>`;
                } else if (element.type === 'circle') {
                    svg += `<ellipse cx="${element.width/2}" cy="${element.height/2}" rx="${element.width/2}" ry="${element.height/2}" fill="${element.color}" transform="${transform}"/>`;
                } else {
                    svg += `<rect x="0" y="0" width="${element.width}" height="${element.height}" fill="${element.color}" transform="${transform}"/>`;
                }
            });

            svg += '</svg>';

            const blob = new Blob([svg], { type: 'image/svg+xml' });
            const link = document.createElement('a');
            link.download = 'design.svg';
            link.href = URL.createObjectURL(blob);
            link.click();

            exportModal.style.display = 'none';
        }

        function exportAsHTML() {
            let html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Exported Design</title>
    <style>
        body { margin: 0; padding: 0; background: #1a1a1a; position: relative; width: 800px; height: 600px; }
        .element { position: absolute; }
    </style>
</head>
<body>`;

            elements.forEach(element => {
                const style = `left: ${element.x}px; top: ${element.y}px; width: ${element.width}px; height: ${element.height}px; transform: rotate(${element.rotation}deg);`;
                
                if (element.type === 'text') {
                    html += `    <div class="element" style="${style} color: ${element.color}; font-size: ${element.fontSize || 16}px; display: flex; align-items: center; justify-content: center; font-weight: 500;">${element.text || 'Sample Text'}</div>\n`;
                } else {
                    const extraStyle = element.type === 'circle' ? ' border-radius: 50%;' : '';
                    html += `    <div class="element" style="${style} background-color: ${element.color};${extraStyle}"></div>\n`;
                }
            });

            html += `</body>
</html>`;

            const blob = new Blob([html], { type: 'text/html' });
            const link = document.createElement('a');
            link.download = 'design.html';
            link.href = URL.createObjectURL(blob);
            link.click();

            exportModal.style.display = 'none';
        }

        // Keyboard Shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.target.tagName === 'INPUT') return;

            switch (e.key.toLowerCase()) {
                case 'v': setTool('select'); break;
                case 'r': setTool('rectangle'); break;
                case 'c': setTool('circle'); break;
                case 't': setTool('text'); break;
                case 'delete':
                case 'backspace':
                    if (selectedElement) {
                        deleteElement(selectedElement);
                    }
                    break;
            }
        });

        // Initialize the application
        init();
    </script>
</body>
</html>